/*Задача:
     Дана матрица mxn,необходимо преобразовать её в одномерный массив в порядке след столбцов матрицы.*/

#include <iostream> //Подключаем библиотеку функции ввода-вывода
using namespace std;
#define S 3 //S - strings //Сохраняем в S константное значение 3. (Тоже самое можно было сделать и так: const int n = 3;, просто так легче и быстрее).
#define C 4 //C - columns //Сохраняем в С константное значение 4. (Тоже самое можно было сделать и так: const int n = 4;, просто так легче и быстрее).



int main() {
	int M[S][C]; //M - matrix
	int *M2 = new int[S*C]; //Создаем другой одномерный массив, куда будем пихать все те числа, которые находятся в двухмерном массиве.

	//Создаем массив рандомными числами от 100 до 1.
	for (int i = 0; i < S; i++) {
		for (int j = 0; j < C; j++) {
			int k;
			k = rand() % 100 + 1;
			M[i][j] = k;
			M2[i*(S*C) + j] = k; //Сразу же здесь сохраняем все те числа, что и в двухмерном массиве. Конечно, можно было сделать оптимизированей, ведь мы не всегда знаем, что у нас на входе. Тогда можно сначала определить двухмерный массив, и потом этот двухмерный массив записать в один придав ему значение, наверное работала, хз.
			
		}
	}

	//Печатаем матрицу двухмерного массива.
	for (int i = 0; i < S; i++) {
		for (int j = 0; j < C; j++) {
			cout << M[i][j] << " ";
		}
		cout << endl;
	}
	cout << endl;

	//Печатем матрицу переработанный в одномерный массив.
	for (int j = 0; j < C; j++) {
		for (int i = 0; i < S; i++) {
				cout << M2[i*(S*C) + j] << " ";
		}
	}





	cout << endl;
	system("pause"); //Смотрюим на значения.
	return 0; //Сообщяем компилятору о правильном скончание работы.
}
